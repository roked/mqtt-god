apply plugin: 'com.android.library'
//Gradle Maven Publish Plugin
apply plugin: 'maven-publish'
apply plugin: 'signing'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion rootProject.ext.targetSdkVersion

        testApplicationId "org.eclipse.paho.android.service.test"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    dexOptions {
        preDexLibraries = false
    }

    lintOptions {
        abortOnError false
    }
}

repositories {
    maven { url rootProject.ext.mavenUrl }
}

configurations {
    implementation.setCanBeResolved(true)
    androidTestImplementation.exclude module: 'org.eclipse.paho.client.mqttv3'
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "androidx.appcompat:appcompat:${rootProject.ext.appcompat}"
    implementation "androidx.localbroadcastmanager:localbroadcastmanager:${rootProject.ext.localbroadcastmanager}"
    implementation "org.eclipse.paho:org.eclipse.paho.client.mqttv3:${rootProject.ext.clientVersion}"
}

android.libraryVariants.all { variant ->
    println "variant.javaCompile.classpath" + variant.javaCompile

    task("generate${variant.name}Javadoc", type: Javadoc) {
        title = "$name $version API"
        description "Generates Javadoc for $variant.name."
        source = variant.javaCompile.source
        ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
        // issue:Cannot create variant 'android-aidl' after dependency configuration ':org.eclipse.paho.android.service:debugApiElements' has been resolved
        // classpath = files(variant.javaCompile.classpath.files) + files(ext.androidJar)
        options.links("http://docs.oracle.com/javase/7/docs/api/");
        options.links("http://d.android.com/reference/");
        exclude '**/BuildConfig.java'
        exclude '**/R.java'
    }
}

//Gradle Maven Publish Plugin Script Configuration
//Run Script: ./gradlew publish

def versionName = "1.1.2-SNAPSHOT"
def groupName = "cn.bingerz.android"
def artifactName = "org.eclipse.paho.android.service"
def siteUrl = 'https://github.com/bingerz/flip-mqtt-android'
def gitUrl = 'https://github.com/bingerz/flip-mqtt-android.git'
def repositorySnapshotUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
def repositoryReleaseUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"

// Generate Sources Jar
task generateSourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier 'sources'
}

signing {
    sign publishing.publications
}

// Copy the Paho Java client into the libs directory to bundle it with the AAR
task copyLibs(type: Copy) {
    println "Copying MQTT Jar into libs directory"
    from configurations.implementation
    into 'libs'
    include 'org.eclipse.paho*'
}

// Renames the Release AAR file to a maven convention
task renameReleaseAAR(type: Copy) {
    from("$buildDir/outputs/aar")
    into("$buildDir/outputs/aar/")
    include('org.eclipse.paho.android.service-debug.aar')
    rename('org.eclipse.paho.android.service-debug.aar', rootProject.ext.serviceArchivesBaseName + '-' + rootProject.ext.serviceVersion + '.aar')
}

// Generate Plain Jar Version of library (good for legacy users)
task generateLibraryJar(type: Jar) {
    from("$buildDir/intermediates/classes/release")
}

// Generate Javadoc
task generateJavaDocJar(type: Jar, dependsOn: (rootProject.ext.serviceVersion.endsWith('-SNAPSHOT') ? 'generatedebugJavadoc' : 'generatereleaseJavadoc')){
    from("$buildDir/docs/javadoc")
    classifier 'javadoc'
}

afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {
                from components.release
                groupId = groupName
                artifactId = artifactName
                version = versionName
                artifact generateSourcesJar

                pom {
                    name = 'Eclipse Paho Android Service'
                    description = 'The Paho Android Service is an MQTT client library written in Java for developing applications on Android.'
                    url = siteUrl
                    licenses {
                        license {
                            name = 'The Apache Software License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }
                    developers {
                        developer {
                            id = findProperty("developer.id")
                            name = findProperty("developer.name")
                            email = findProperty("developer.email")
                        }
                    }
                    scm {
                        connection = gitUrl
                        developerConnection = gitUrl
                        url = siteUrl
                    }
                }
            }
        }

        repositories {
            maven {
                name = "release"
                url = versionName.endsWith('SNAPSHOT') ? repositorySnapshotUrl : repositoryReleaseUrl
                credentials {
                    username = findProperty("sonatype.username")
                    password = findProperty("sonatype.password")
                }
            }
        }
    }
}

task debug {
    doLast {
        configurations.implementation.each { println it }
    }
}

// Required to bundle Java library Jar in AAR
clean.dependsOn("copyLibs")

assemble.doLast {
//    renameReleaseAAR.execute()
}

clean.doFirst {
    delete 'libs'
}
